<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id: pnadmin.php 24342 2008-06-06 12:03:14Z markwest $
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_Value_Addons
 * @subpackage News
*/

/**
 * the main administration function
 * This function is the default function, and is called whenever the
 * module is initiated without defining arguments.  As such it can
 * be used for a number of things, but most commonly it either just
 * shows the module menu and returns or calls whatever the module
 * designer feels should be the default function (often this is the
 * view() function)
 * @author Mark West
 * @return string HTML string
 */
function News_admin_main()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = pnRender::getInstance('News', false);

    // Return the output that has been generated by this function
    return $pnRender->fetch('news_admin_main.htm');
}

/**
 * create a new news article
 * this function is purely a wrapper for the output from news_user_new
 * @author Mark West
 * @return string HTML string
 */
function News_admin_new()
{
    // Return the output that has been generated by this function
    return pnModFunc('News', 'user', 'new');
}

/**
 * modify an item
 * This is a standard function that is called whenever an administrator
 * wishes to modify a current module item
 * @param int 'sid' the id of the item to be modified
 * @param int 'objectid' generic object id maps to sid if present
 * @author Mark West
 * @return string HTML string
 */
function News_admin_modify($args)
{
    $sid = FormUtil::getPassedValue('sid', isset($args['sid']) ? $args['sid'] : null, 'GET');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'GET');
    // At this stage we check to see if we have been passed $objectid
    if (!empty($objectid)) {
        $sid = $objectid;
    }

    // Validate the essential parameters
    if (empty($sid)) {
        return LogUtil::registerError(_MODARGSERROR);
    }

    // Get the news article
    $item = pnModAPIFunc('News', 'user', 'get', array('sid' => $sid));

    if ($item === false) {
        return LogUtil::registerError(pnML('_NOSUCHITEM', array('i' => _NEWS_STORY)), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', "$item[aid]::$sid", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Get the format types. 'home' string is bits 0-1, 'body' is bits 2-3.
    $item['hometextcontenttype'] = ($item['format_type']%4);
    $item['bodytextcontenttype'] = (($item['format_type']/4)%4);

    // Set the publishing date options.
    if (is_null($item['from']) && is_null($item['to'])) {
        $item['unlimited'] = 1;
        $item['tonolimit'] = 0;
    } elseif (!is_null($item['from']) && is_null($item['to'])) {
        $item['unlimited'] = 0;
        $item['tonolimit'] = 1;
    } else  {
        $item['unlimited'] = 0;
        $item['tonolimit'] = 0;
    }

    // Get the module configuration vars
    $modvars = pnModGetVar('News');

    // Create output object
    $pnRender = pnRender::getInstance('News', false);

    // Get the preview of the item
    $pnRender->assign('preview', pnModFunc('News', 'user', 'preview',
                                 array('title' => $item['title'],
                                       'language' => $item['language'],
                                       'hometext' => $item['hometext'],
                                       'hometextcontenttype' => $item['hometextcontenttype'],
                                       'bodytext' => $item['bodytext'],
                                       'bodytextcontenttype' => $item['bodytextcontenttype'],
                                       'notes' => $item['notes'],
                                       'ihome' => $item['ihome'])));

    if ($modvars['enablecategorization']) {
        // load the category registry util
        if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
            pn_exit (pnML('_UNABLETOLOADCLASS', array('s' => 'CategoryRegistryUtil')));
        }
        $catregistry = CategoryRegistryUtil::getRegisteredModuleCategories ('News', 'stories');
        
        $pnRender->assign('catregistry', $catregistry);
    }

    // Pass the module configuration to the template
    $pnRender->assign($modvars);

    // Assign the item to the template
    $pnRender->assign($item);

    // Assign the content format
    $formattedcontent = pnModAPIFunc('News', 'user', 'isformatted', array('func' => 'new'));
    $pnRender->assign('formattedcontent', $formattedcontent);

    // Return the output that has been generated by this function
    return $pnRender->fetch('news_admin_modify.htm');
}

/**
 * This is a standard function that is called with the results of the
 * form supplied by News_admin_modify() to update a current item
 * @param int 'sid' the id of the item to be updated
 * @param int 'objectid' generic object id maps to sid if present
 * @param string 'title' the title of the news item
 * @param string 'urltitle' the title of the news item formatted for the url
 * @param string 'language' the language of the news item
 * @param string 'bodytext' the summary text of the news item
 * @param int 'bodytextcontenttype' the content type of the summary text
 * @param string 'extendedtext' the body text of the news item
 * @param int 'extendedtextcontenttype' the content type of the body text
 * @param string 'notes' any administrator notes
 * @param int 'published_status' the published status of the item
 * @param int 'ihome' publish the article in the homepage
 * @author Mark West
 * @return bool true
 */
function News_admin_update($args)
{
    $story = FormUtil::getPassedValue('story', isset($args['story']) ? $args['story'] : null, 'POST');
    if (!empty($story['objectid'])) {
        $story['sid'] = $story['objectid'];
    }

    // Validate the essential parameters
    if (empty($story['sid'])) {
        return LogUtil::registerError(_MODARGSERROR);
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('News', 'admin', 'view'));
    }

    // Get the unedited news article for the permissions check
    $item = pnModAPIFunc('News', 'user', 'get', array('sid' => $story['sid']));
    if ($item === false) {
        return LogUtil::registerError(pnML('_NOSUCHITEM', array('i' => _NEWS_STORY)), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', "$item[aid]::$item[sid]", ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Notable by its absence there is no security check here

    // Update the story
    if (pnModAPIFunc('News', 'admin', 'update',
                    array('sid' => $story['sid'],
                          'title' => $story['title'],
                          'urltitle' => $story['urltitle'],
                          '__CATEGORIES__' => $story['__CATEGORIES__'],
                          'language' => isset($story['language']) ? $story['language'] : '',
                          'hometext' => $story['hometext'],
                          'hometextcontenttype' => $story['hometextcontenttype'],
                          'bodytext' => $story['bodytext'],
                          'bodytextcontenttype' => $story['bodytextcontenttype'],
                          'notes' => $story['notes'],
                          'ihome' => isset($story['ihome']) ? $story['ihome'] : 0,
                          'unlimited' => isset($story['unlimited']) ? $story['unlimited'] : null,
                          'from' => mktime($story['fromHour'], $story['fromMinute'], 0, $story['fromMonth'], $story['fromDay'], $story['fromYear']),
                          'tonolimit' => isset($story['tonolimit']) ? $story['tonolimit'] : null,
                          'to' => mktime($story['toHour'], $story['toMinute'], 0, $story['toMonth'], $story['toDay'], $story['toYear']),
                          'published_status' => $story['published_status']))) {
        // Success
        LogUtil::registerStatus (pnML('_UPDATEITEMSUCCEDED', array('i' => _NEWS_STORY)));
    }

    return pnRedirect(pnModURL('News', 'admin', 'view'));
}

/**
 * delete item
 * This is a standard function that is called whenever an administrator
 * wishes to delete a current module item.  Note that this function is
 * the equivalent of both of the modify() and update() functions above as
 * it both creates a form and processes its output.  This is fine for
 * simpler functions, but for more complex operations such as creation and
 * modification it is generally easier to separate them into separate
 * functions.  There is no requirement in the Zikula MDG to do one or the
 * other, so either or both can be used as seen appropriate by the module
 * developer
 * @param int 'sid' the id of the news item to be deleted
 * @param int 'objectid' generic object id maps to sid if present
 * @param int 'confirmation' confirmation that this news item can be deleted
 * @author Mark West
 * @return mixed HTML string if no confirmation, true if delete successful, false otherwise
 */
function News_admin_delete($args)
{
    $sid = FormUtil::getPassedValue('sid', isset($args['sid']) ? $args['sid'] : null, 'REQUEST');
    $objectid = FormUtil::getPassedValue('objectid', isset($args['objectid']) ? $args['objectid'] : null, 'REQUEST');
    $confirmation = FormUtil::getPassedValue('confirmation', null, 'POST');
    if (!empty($objectid)) {
        $sid = $objectid;
    }

    // Validate the essential parameters
    if (empty($sid)) {
        return LogUtil::registerError(_MODARGSERROR);
    }

    // Get the news story
    $item = pnModAPIFunc('News', 'user', 'get', array('sid' => $sid));

    if ($item == false) {
        return LogUtil::registerError(pnML('_NOSUCHITEM', array('i' => _NEWS_STORY)), 404);
    }

    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', "$item[aid]::$item[sid]", ACCESS_DELETE)) {
        return LogUtil::registerPermissionError();
    }

    // Check for confirmation.
    if (empty($confirmation)) {
        // No confirmation yet
        // Create output object
        $pnRender = pnRender::getInstance('News', false);

        // Add News story ID
        $pnRender->assign('sid', $sid);

        // Return the output that has been generated by this function
        return $pnRender->fetch('news_admin_delete.htm');
    }

    // If we get here it means that the user has confirmed the action

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('News', 'admin', 'view'));
    }

    // Delee
    if (pnModAPIFunc('News', 'admin', 'delete', array('sid' => $sid))) {
        // Success
        LogUtil::registerStatus (pnML('_DELETEITEMSUCCEDED', array('i' => _NEWS_STORY)));
    }

    return pnRedirect(pnModURL('News', 'admin', 'view'));
}

/**
 * view items
 * @param int 'startnum' starting number for paged output
 * @author Mark West
 * @return string HTML string
 */
function News_admin_view($args)
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
    $property = FormUtil::getPassedValue('news_property', isset($args['news_property']) ? $args['news_property'] : null, 'POST');
    $category = FormUtil::getPassedValue("news_{$property}_category", isset($args["news_{$property}_category"]) ? $args["news_{$property}_category"] : null, 'POST');
    $clear    = FormUtil::getPassedValue('clear', false, 'POST');
    if ($clear) {
        $property = null;
        $category = null;
    }

    // get module vars for later use
    $modvars = pnModGetVar('News');

    if ($modvars['enablecategorization']) {
        // load the category registry util
        if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
            pn_exit (pnML('_UNABLETOLOADCLASS', array('s' => 'CategoryRegistryUtil')));
        }
        $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('News', 'stories');
        $properties = array_keys($catregistry);

        // Validate and build the category filter - mateo
        if (!empty($property) && in_array($property, $properties) && !empty($category)) {
            $catFilter = array($property => $category);
        }

        // Assign a default property - mateo
        if (empty($property) || !in_array($property, $properties)) {
            $property = $properties[0];
        }

        // plan ahead for ML features
        $propArray = array();
        foreach ($properties as $prop) {
            $propArray[$prop] = $prop;
        }
    }

    // Get all news story
    $items = pnModAPIFunc('News', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => $modvars['itemsperpage'],
                                'ignoreml' => true,
                                'order'    => 'sid',
                                'category' => isset($catFilter) ? $catFilter : null,
                                'catregistry' => isset($catregistry) ? $catregistry : null));

    $newsitems = array();
    foreach ($items as $item) {
        $options = array();
        $options[] = array('url'   => pnModURL('News', 'user', 'display', array('sid' => $item['sid'])),
                           'image' => 'demo.gif',
                           'title' => _VIEW);
        if (SecurityUtil::checkPermission( 'Stories::Story', "$item[aid]::$item[sid]", ACCESS_EDIT)) {
            $options[] = array('url'   => pnModURL('News', 'admin', 'modify', array('sid' => $item['sid'])),
                               'image' => 'xedit.gif',
                               'title' => _EDIT);
            if (SecurityUtil::checkPermission( 'Stories::Story', "$item[aid]::$item[sid]", ACCESS_DELETE)) {
                $options[] = array('url'   => pnModURL('News', 'admin', 'delete', array('sid' => $item['sid'])),
                                   'image' => '14_layer_deletelayer.gif',
                                   'title' => _DELETE);
            }
        }
        $item['options'] = $options;

        switch ($item['published_status']) {
            case 0:
                $item['status'] = _NEWS_PUBLISHED;
                break;
            case 1:
                $item['status'] = _NEWS_REJECTED;
                break;
            case 2:
                $item['status'] = _NEWS_PENDING;
                break;
            case 3:
                $item['status'] = _NEWS_ARCHIVED;
                break;
            default:
                $item['status'] = _NEWS_UNKNOWN;
                break;
        }

        if ($item['ihome'] == 0) {
            $item['ihome'] = _YES;
        } else {
            $item['ihome'] = _NO;
        }
        $newsitems[] = $item;
    }

    // Create output object
    $pnRender = pnRender::getInstance('News', false);

    // Assign the items and modvars to the template
    $pnRender->assign('newsitems', $newsitems);
    $pnRender->assign($modvars);

    // Assign the default language
    $pnRender->assign('lang', pnUserGetLang());

    // Assign the categories information if enabled
    if ($modvars['enablecategorization']) {
        $pnRender->assign('catregistry', $catregistry);
        $pnRender->assign('numproperties', count($propArray));
        $pnRender->assign('properties', $propArray);
        $pnRender->assign('property', $property);
        $pnRender->assign("category", $category);
    }

    // Assign the values for the smarty plugin to produce a pager
    $pnRender->assign('pager', array('numitems' => pnModAPIFunc('News', 'user', 'countitems', array('category' => isset($catFilter) ? $catFilter : null)),
                                     'itemsperpage' => $modvars['itemsperpage']));

    // Return the output that has been generated by this function
    return $pnRender->fetch('news_admin_view.htm');
}

/**
 * This is a standard function to modify the configuration parameters of the
 * module
 * @author Mark West
 * @return string HTML string
 */
function News_admin_modifyconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
        pn_exit (pnML('_UNABLETOLOADCLASS', array('s' => 'CategoryRegistryUtil')));
    }
    $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('News', 'stories');
    $properties = array_keys($catregistry);
    $propertyName = pnModGetVar('News', 'topicproperty');
    $propertyIndex = empty($propertyName) ? 0 : array_search($propertyName, $properties);

    // Create output object
    $pnRender = pnRender::getInstance('News', false);

    // Number of items to display per page
    $pnRender->assign(pnModGetVar('News'));

    $pnRender->assign('properties', $properties);
    $pnRender->assign('property', $propertyIndex);

    // Return the output that has been generated by this function
    return $pnRender->fetch('news_admin_modifyconfig.htm');
}

/**
 * This is a standard function to update the configuration parameters of the
 * module given the information passed back by the modification form
 * @author Mark West
 * @param int 'itemsperpage' number of articles per page
 * @return bool true
 */
function News_admin_updateconfig()
{
    // Security check
    if (!SecurityUtil::checkPermission( 'Stories::Story', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // Confirm authorisation code
    if (!SecurityUtil::confirmAuthKey()) {
        return LogUtil::registerAuthidError (pnModURL('News', 'admin', 'view'));
    }

    // Update module variables
    $itemsperpage = (int)FormUtil::getPassedValue('itemsperpage', 10, 'POST');
    pnModSetVar('News', 'itemsperpage', $itemsperpage);
    $storyhome = (int)FormUtil::getPassedValue('storyhome', 10, 'POST');
    pnModSetVar('News', 'storyhome', $storyhome);
    $storyorder = (int)FormUtil::getPassedValue('storyorder', 10, 'POST');
    pnModSetVar('News', 'storyorder', $storyorder);
    $enablecategorization = (bool)FormUtil::getPassedValue('enablecategorization', false, 'POST');
    pnModSetVar('News', 'enablecategorization', $enablecategorization);
    
    if (!($class = Loader::loadClass('CategoryRegistryUtil'))) {
        pn_exit (pnML('_UNABLETOLOADCLASS', array('s' => 'CategoryRegistryUtil')));
    }
    $catregistry  = CategoryRegistryUtil::getRegisteredModuleCategories('News', 'stories');
    $properties = array_keys($catregistry);
    $topicproperty = FormUtil::getPassedValue('topicproperty', null, 'POST');
    pnModSetVar('News', 'topicproperty', $properties[$topicproperty]);

    $permalinkformat = FormUtil::getPassedValue('permalinkformat', null, 'POST');
    if ($permalinkformat == 'custom') {
        $permalinkformat = FormUtil::getPassedValue('permalinkstructure', null, 'POST');
    }
    pnModSetVar('News', 'permalinkformat', $permalinkformat);

    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module','updateconfig','News', array('module' => 'News'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus (_CONFIGUPDATED);

    return pnRedirect(pnModURL('News', 'admin', 'main'));
}
